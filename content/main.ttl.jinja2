{#- ------------------------------------------------------------------------------------ -#}
{#-  GLOBAL VARIABLES                                                                    -#}
{#- ------------------------------------------------------------------------------------ -#}
{%- set dc = ctx|to_context_obj -%}
{%- set baseNode = ctx.config.clientUrl ~ '/projects/' ~ ctx.questionnaireUuid -%}
{#- ------------------------------------------------------------------------------------ -#}
{#-  RENDER TRIPLE                                                                       -#}
{#- ------------------------------------------------------------------------------------ -#}
{% macro renderTriple(subject, predicate, object) -%}
{{ subject }} {{ predicate }} {{ object }} .
{% endmacro %}
{#- ------------------------------------------------------------------------------------ -#}
{#-  ANSWERS MACROS                                                                      -#}
{#- ------------------------------------------------------------------------------------ -#}
{%- macro renderAnswerValue(question, reply, path, rdfNode) -%}
    {%- if rdfNode.startswith('<') == False -%}
        {%- set rdfNode = "<" ~ rdfNode ~ ">" -%}
    {%- endif -%}
    {{ renderTriple(rdfNode, '<' ~ question.annotations['rdfType'] ~ '>', '"' ~ reply.value ~ '"') }}
{%- endmacro -%}
{%- macro renderAnswerOption(question, reply, path, rdfNode) -%}
    {%- set answer = reply.answer -%}
    {%- set path = path ~ '.' ~ answer.uuid -%}
    {%- for question in answer.followups -%}
        {{ renderQuestion(question, path, rdfNode) }}
    {%- endfor -%}
{%- endmacro -%}
{%- macro renderAnswerList(question, reply, path, rdfNode) -%}
    {%- set itemPathPrefix = path ~ '.' -%}
    {%- set entityType = question.annotations['rdfType'].split('#')[1] -%}
    {%- set parentRdfNode = rdfNode -%}
    {%- if parentRdfNode.startswith('<') == False -%}
        {%- set parentRdfNode = "<" ~ parentRdfNode ~ ">" -%}
    {%- endif -%}
    {%- set rdfNode = baseNode ~ '#' ~ entityType -%}
    {%- for item in reply.items -%}
        {%- set itemPath = itemPathPrefix ~ item -%}
        {%- set rdfNodeItem = '<' ~ rdfNode ~ '_' ~ item ~ '>' -%}
        {%- if question.annotations['rdfRelation'] -%}
            {{ renderTriple(parentRdfNode, '<' ~ question.annotations['rdfRelation'] ~ '>', rdfNodeItem) }}
        {%- endif -%}
        {{ renderTriple(rdfNodeItem, '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>', '<' ~ question.annotations['rdfType'] ~ '>') }}
        {%- for question in question.followups -%}
            {{ renderQuestion(question, itemPath, rdfNodeItem) }}
        {%- endfor -%}
    {%- endfor -%}
{%- endmacro -%}
{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTION MACROS                                                                     -#}
{#- ------------------------------------------------------------------------------------ -#}
{%- macro renderQuestionReply(question, path, rdfNode) -%}
    {%- set reply = question.replies.get(path) -%}
    {%- if reply and reply.value -%}
        {%- if question is of_type('ValueQuestion') and reply is of_type('StringReply') -%}
            {{ renderAnswerValue(question, reply, path, rdfNode) }}
        {%- elif question is of_type('OptionsQuestion') and reply is of_type('AnswerReply') -%}
            {{ renderAnswerOption(question, reply, path, rdfNode) }}
        {%- elif question is of_type('ListQuestion') and reply is of_type('ItemListReply') -%}
            {{ renderAnswerList(question, reply, path, rdfNode) }}
        {%- elif question is of_type('IntegrationQuestion') and reply is of_type('IntegrationReply') -%}
            {{ renderAnswerValue(question, reply, path, rdfNode) }}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}
{%- macro renderQuestion(question, path, rdfNode) -%}
    {%- set path = path ~ '.' ~ question.uuid -%}
    {{ renderQuestionReply(question, path, rdfNode) }}
{%- endmacro -%}
{#- ------------------------------------------------------------------------------------ -#}
{#-  CHAPTER MACROS                                                                      -#}
{#- ------------------------------------------------------------------------------------ -#}
{%- macro renderChapter(chapter) -%}
    {%- for question in chapter.questions -%}
        {{ renderQuestion(question, chapter.uuid, baseNode) }}
    {%- endfor -%}
{%- endmacro -%}
{#- ------------------------------------------------------------------------------------ -#}
{%- for chapter in dc.km.chapters -%}
    {{ renderChapter(chapter) }}
{%- endfor -%}
